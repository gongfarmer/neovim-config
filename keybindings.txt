Keybindings from the new neovim lua config

=== Package management with packer:
:PackerCompile     to create plugin/packer_compiled.lua from lua/config/plugins.lua
:PackerClean       remove plugins that are no longer in the config
:PackerStatus      list installed / loaded plugins
:PackerInstall
:PackerUpdate

=== code completion
  * plugin nvim-cmp handles this
  * list of completion suggestions pops up automatically
  * navigate the list with Ctrl-n, Ctrl-p

=== telescope finders
This configuration comes from rafcamlet.
My old config only had bindings for live grep, find files, and search help so this is probably an improvement.
<space>og    git
<space>of    live grep
<space>oo    find
<space>ob    buffers
<space>oq    find in your vim configuration files
<space>ow    telescope workspaces
<space>oh    telescope help_tags
<space>oz    telescope zoxide list

=== file manager
fi         open nnn picker in the dir of the active buffer's file

:WhichKey show keybindings
  * WhichKey will automatically show you completions if you start a chord then pause... eg. hit Ctrl-g, pause, it will show you possible completions.
  * It's a little annoying -- pops up a list after I hit :w for some reason')

=== vim-unimpaired normal-mode mappings
This tpope plugin provides some thought-out keybindings
]-Space    add new line after current line, keep cursor on current line
]q         :cnext
[q         :cprevious
]a         :next
[a         :previous
[os        :set spell
]os        :set nospell
yos        :set invspell
[x         decode xml
]x         encode xml
[n         visit next file in dir
]n         visit previous file in dir

=== lsp stuff
K            [lspsaga]   show lsp hover text for whatever is under the cursor
<space>lf    load lsp definition of the constant/function name under the cursor
<space>lo    load outline: popup window shows top-level methods and constants
L            show line diagnostics (ie. the rubocop err message for this line)
]e           jump to the next line with a diagnostic and show it
[e           jump to the next line with a diagnostic and show it

=== some random useful commands
:TsPlaygroundToggle show the treesitter parse tree of your code!
:NeoTest show neotest summary. I don't know how to run tests though.
:SplitjoinSplit split a 1-line ruby statement to 2 lines
:SplitjoinJoin combine a 2-line ruby statement into 1 line
:UndoTreeToggle


:nmap           list normal mode key mappings
:verbose nmap   list normal mode key mappings, and where they were last defined
:vmap           list visual mode key mappings
:imap           list insert mode key mappings

-----

Keybindings for my old neovim vimscript config
TODO: delete this part when all keybinds are moved over

fi         [defx]      Open filemanager
Space-e    [lsp]       Show current line's diagnostic messages in a floating window
;f         [telescope] Telescope find_files
;r         [telescope] Telescope live_grep
\\         [telescope] Telescope buffers
;;         [telescope] Telescope help_tags
]q         []          quickfix next
[q         []          quickfix previous
:Git blame [fugitive]  show blame for current file, with convenient access to each line's most recent commit
:LspStop   [lsp]       stop showing diagnostics, useful for reading old legacy code
\t         [vim-test]  run the test nearest to the cursor, or previous test
\T         [vim-test]  run tests for current file, or previous file if not a test file
\a         [vim-test]  run test suite for the current file
\l         [vim-test]  run the last test
\g         [vim-test]  open the last run test in the current buffer
